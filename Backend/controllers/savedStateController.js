import Measurement from "../models/Measurement.js";
import SavedState from "../models/SavedState.js";

import { createRequire } from "module";
const require = createRequire(import.meta.url);
const PDFDocument = require("pdfkit");

// optional; stub if you don't have it yet
async function getSystemSnapshot(containerId) {
  return { containerId, savedBy: "api", at: new Date().toISOString() };
}

//////////////////////////////////////////////// saveMeasurementState ///////////////////////////////////////////////////////////
export const saveMeasurementState = async (req, res) => {
  try {
    const {
      containerId,
      containerName,
      stateName,
      description = "",
      tags = [],
    } = req.body;

    if (!containerId || !containerName || !stateName) {
      return res.status(400).json({
        success: false,
        error: "Missing required fields: containerId, containerName, stateName",
      });
    }

    let measurement;
    measurement = await Measurement.findOne({ containerId }).sort({
      timestamp: -1,
    });
    if (!measurement) {
      return res.status(404).json({
        success: false,
        error: `No measurements found for container: ${containerId}`,
      });
    }

    // Build the embedded snapshot
    const sensorData = {
      temperature: measurement.temperature,
      pH: measurement.pH,
      weight: measurement.weight,
      height: measurement.height,
      volume: measurement.volume,
      density: measurement.density,
      qualityScore: measurement.qualityScore,
      status: measurement.status,
      networkStatus: measurement.networkStatus,
      timestamp: measurement.timestamp,
    };

    const savedState = new SavedState({
      containerId,
      containerName,
      stateName,
      description,
      tags: Array.isArray(tags) ? tags : [],
      sensorData,
      measurementRef: measurement._id,
      systemSnapshot: await getSystemSnapshot(containerId).catch(
        () => undefined
      ),
    });

    await savedState.save();

    return res.status(201).json({
      success: true,
      data: savedState,
      message: "State saved successfully",
    });
  } catch (error) {
    console.error("❌ Error saving state:", error);
    return res.status(500).json({ success: false, error: error.message });
  }
};

///////////////////////////////////////////////////// getAllSavedstates //////////////////////////////////////////////////////

// Get all saved states
export const getAllSavedstates = async (req, res) => {
  try {
    const states = await SavedState.find().sort({ createdAt: -1 }); // latest first
    res.json({ success: true, data: states });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////

// Delete a state by ID
export const deleteSavedState = async (req, res) => {
  try {
    const { id } = req.params;

    const deletedState = await SavedState.findByIdAndDelete(id);

    if (!deletedState) {
      return res
        .status(404)
        .json({ success: false, message: "State not found" });
    }

    res.json({ success: true, message: "State deleted successfully" });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
};

////////////////////////////////////////////////////////////////////////////////////////////////////////

export const exportSavedStatePdf = async (req, res) => {
  try {
    const { id } = req.params;

    const state = await SavedState.findById(id).lean();
    if (!state) {
      return res
        .status(404)
        .json({ success: false, error: "Saved state not found" });
    }

    const {
      containerId,
      containerName,
      stateName,
      description,
      tags,
      createdAt,
      sensorData = {},
      systemSnapshot,
    } = state;

    const filename = `${containerName || "container"}_${
      stateName || "state"
    }_${new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-")}.pdf`;

    res.setHeader("Content-Type", "application/pdf");
    res.setHeader("Content-Disposition", `attachment; filename="${filename}"`);

    const doc = new PDFDocument({ margin: 50 });
    doc.pipe(res);

    // Title
    doc.fontSize(18).text("Saved Measurement State", { align: "center" });
    doc.moveDown(0.5);
    doc
      .fontSize(10)
      .fillColor("#666")
      .text("Generated by Milk Quality App", { align: "center" });
    doc.moveDown();

    // General info
    doc.fontSize(12).fillColor("black").text("General", { underline: true });
    doc.moveDown(0.5);
    doc.fontSize(11);
    doc.text(`State name: ${stateName}`);
    doc.text(`Container name: ${containerName}`);
    doc.text(`Container ID: ${containerId}`);
    doc.text(`Saved at: ${new Date(createdAt).toISOString()}`);
    doc.text(
      `Tags: ${Array.isArray(tags) && tags.length ? tags.join(", ") : "—"}`
    );
    if (description) {
      doc.moveDown();
      doc.text("Description:", { underline: true });
      doc.text(description);
    }

    doc.moveDown();

    // Sensor snapshot
    doc.fontSize(12).text("Sensor Snapshot", { underline: true });
    doc.moveDown(0.5);
    doc.fontSize(11);
    doc.text(`Temperature: ${sensorData.temperature ?? "—"}`);
    doc.text(`pH: ${sensorData.pH ?? "—"}`);
    doc.text(`Weight: ${sensorData.weight ?? "—"}`);
    doc.text(`Height: ${sensorData.height ?? "—"}`);
    doc.text(`Volume: ${sensorData.volume ?? "—"}`);
    doc.text(`Density: ${sensorData.density ?? "—"}`);
    doc.text(`Network: ${sensorData.networkStatus ?? "—"}`);
    doc.text(
      `Measurement Timestamp: ${
        sensorData.timestamp
          ? new Date(sensorData.timestamp).toISOString()
          : "—"
      }`
    );

    doc.moveDown();

    // Status
    doc.fontSize(12).text("Sensor Status", { underline: true });
    doc.moveDown(0.5);
    doc.fontSize(11);
    const st = sensorData.status || {};
    doc.text(`Temperature status: ${st.temperature ?? "—"}`);
    doc.text(`pH status: ${st.pH ?? "—"}`);
    doc.text(`Weight status: ${st.weight ?? "—"}`);
    doc.text(`Volume status: ${st.volume ?? "—"}`);

    // System snapshot (optional)
    if (systemSnapshot && Object.keys(systemSnapshot).length) {
      doc.moveDown();
      doc.fontSize(12).text("System Snapshot", { underline: true });
      doc.moveDown(0.5);
      doc.fontSize(10).text(JSON.stringify(systemSnapshot, null, 2));
    }

    doc.end();
  } catch (error) {
    console.error("❌ Error generating PDF:", error);
    res.status(500).json({ success: false, error: error.message });
  }
};
